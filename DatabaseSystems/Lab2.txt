/*
Ben Walker
CPSC 5021 – Database Systems
Lab 2 – SQL

1. (2 points) Write the SQL code that will create the table structures for the table Students, 
Courses, Registration, separately. */

CREATE TABLE Students (
studentID	CHAR(11)	NOT NULL,
firstName	VARCHAR(20)	NOT NULL,
lastName	VARCHAR(20)	NOT NULL,
gender		CHAR(1)		NOT NULL,
dateofBirth	DATE		NOT NULL,
PRIMARY KEY ( studentID	)
)
ENGINE=InnoDB;

CREATE TABLE Courses (
courseCode	VARCHAR(6)	NOT NULL,
courseName	VARCHAR(70)	NOT NULL,
level		CHAR(2),
credits		FLOAT		NOT NULL,
PRIMARY KEY ( courseCode )
)
ENGINE=InnoDB;

CREATE TABLE `Registration` (
studentID	CHAR(11)	NOT NULL,
courseCode	VARCHAR(6)	NOT NULL,
grade		DECIMAL(2, 1)	NOT NULL,
PRIMARY KEY ( studentID, courseCode ),
UNIQUE INDEX ( studentID, courseCode ),
FOREIGN KEY ( studentID	) REFERENCES Students ( studentID ),
FOREIGN KEY ( courseCode ) REFERENCES Courses ( courseCode )
)
ENGINE=InnoDB;

/*
2. (1 point) Write the SQL code to enter data in each table. */


INSERT INTO Students
VALUES('861103-2438', 'Adam', 'Johnson', 'M', '1990-10-01'),
('911212-1746', 'Eva', 'Smith', 'F', '1991-08-20'),
('950829-1848', 'Anna', 'Washington', 'F', '1993-09-26'),
('123456-0980', 'Eric', 'Alonzo', 'M', '1990-05-26'),
('908023-2456', 'Bo,', 'Ek', 'M', '1992-03-15'),
('098735-3456', 'Danny', 'Goss', 'M', '1992-02-01'),
('124345-3430', 'Mike', 'White', 'M', '1995-06-10'),
('124568-1345', 'Emily', 'Young', 'F', '1995-04-28'),
('908409-0010', 'Cathy', 'Lee', 'F', '1993-10-06'),
('124587-9088', 'Ben', 'Woo', 'M', '1992-11-30'),
('120953-0909', 'Anna', 'Washington', 'F', '1990-10-09'),
('120449-1008', 'John', 'Goss', 'M', '1995-10-26');

INSERT INTO Courses
VALUES('CS056', 'Database Systems', 'G1','5'),
('CS010', 'C++', 'U1','5'),
('ENG111', 'English', 'U1','3'),
('FIN052', 'Finance', 'G1', '5'),
('PHY210', 'Physics', 'U2', '5'),
('CHE350', 'Chemistry', 'U3', '5'),
('BIO001', 'Biology', 'U1', '3'),
('CS052', 'Operating Systems', 'G1', '5');

INSERT INTO Registration
VALUES('861103-2438', 'CS056', 4),
('861103-2438', 'CS010', 4),
('861103-2438', 'PHY210', 3.5),
('911212-1746', 'ENG111', 2),
('950829-1848', 'CHE350', 3),
('950829-1848', 'BIO001', 2.5),
('123456-0980', 'CS052', 3.5),
('123456-0980', 'CS056', 4),
('908023-2456', 'PHY210', 3.0),
('908023-2456', 'CS056', 1.0),
('908023-2456', 'CS010', 2.0),
('124345-3430', 'FIN052', 2.5),
('124345-3430', 'CHE350', 4),
('908409-0010', 'CS052', 2),
('124587-9088', 'BIO001', 4),
('124587-9088', 'CS052', 3.5);

/*
3. (1 point) List the names (first name, last name) of all the students. Sort first by last name 
and then by first name alphabetically. */

SELECT firstName, lastName FROM Students
ORDER BY lastName, firstName;

/*
4. (1 point) What are the student ID and the names of the female students who were born 
after 1993? */

SELECT studentID, firstName, lastName FROM Students
WHERE dateofBirth >= '1994-01-01' AND gender = 'F';

/*
5. (1 point) How many students are registered in the course “CS056”? */

SELECT COUNT(studentID) FROM Registration
WHERE courseCode = 'CS056';

/*
6. (1 point) What courses (courseCode and courseName) are offered by the department of 
Computer Science (i.e. course codes CS***)? */

SELECT courseCode, courseName FROM Courses
WHERE courseCode LIKE 'CS%';

/*
7. (1 point) Which course(s) (couseCode and courseName) give less than 5 credits? */

SELECT courseCode, courseName FROM Courses
WHERE credits < 5;

/*
8. (1 point) How many courses are there on each level? */

Select level, COUNT(*) FROM Courses
GROUP BY level;

/*
9. (1 point) Which courses (course codes only) have been taken by the student with student ID 
861103-2438?
 */

SELECT courseCode FROM Registration
WHERE studentID = '861103-2438';

/*
10. (1 point) Which students (studentID only) have the highest grade for the course ‘CS052’? */

SELECT studentID FROM Registration
WHERE courseCode = 'CS052' AND grade = (
	SELECT MAX(grade) from Registration
	WHERE courseCode = 'CS052');	

/*
11. (1 point) Find the courses (course codes only) that have been taken by both the student 
861103-2438 and the student 123456-0980. */

SELECT courseCode FROM Registration
WHERE studentID = '861103-2438' OR studentID = '861103-2438'
GROUP BY studentID
HAVING COUNT(courseCode) > 1;

/*
12. (1 point) Find the students who have not registered any course yet. */

SELECT DISTINCT studentID FROM Students
WHERE NOT EXISTS (
	SELECT * FROM Registration
	WHERE Registration.studentID = Students.studentID);

/*
13. (1 point) Find the student (studentID only), the sum of grade, and the average of grade, for 
each student who has registered courses and the average of grade is above 3. */

SELECT studentID, SUM(grade), AVG(grade) 
FROM Registration
GROUP BY studentID;

/*
14. (1 point) Find the student who has registered the most number of courses. If there are 
multiple students who has registered the most number of courses, just take one student (To 
take only one record - the 1st record in the returned result, use ‘limit 1’ at the end of your 
SQL code). */

SELECT studentID, COUNT(studentID) AS studentID_occurrance
FROM Registration
GROUP BY studentID
ORDER BY studentID_occurrance DESC
LIMIT 1;

/*
15. (1 point) Find the students (studentID only) who have taken either “PHY210” or “BIO001”. */

SELECT studentID FROM Registration
WHERE courseCode = 'PHY210' OR courseCode = 'BIO001';

/*
16. (1 point) Find the youngest student’s name. */

SELECT firstName, lastName FROM Students
WHERE dateofBirth = (
	SELECT MAX(dateofBirth) FROM Students
	LIMIT 1);

/*
17. (1 point) Change the credit for all Computer Science courses (i.e. course codes CS***) with 
five credits from 5 to 6. */

UPDATE Courses
SET credits = 6
WHERE courseCode LIKE 'CS%' AND credits = 5;

/*
18. (1 point) Delete the registration record for the student 908409-0010. */

DELETE FROM  Registration
WHERE studentID = '908409-0010';

/*
19. (1 point) Change the grade of “PHY210” for student 861103-2438 from 3.5 to 3.8. */

UPDATE Registration
SET grade = 3.8
WHERE CourseCode = 'PHY210' AND studentID = '861103-2438' AND grade = 3.5;