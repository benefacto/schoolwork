Ben Walker
CPSC 5031 01
HW #3
----------------------------------------------------------------------
2.4; pg. 76; #1a, 1c, 4a, 4b, 4c
----------------------------------------------------------------------
1.a. x(n) = x(n - 1) + 5 for n>1, x(1) = 0
x(n - 1) = (x(n - 2) + 5) + 5
x(n - 1) = x(n - 2) + 10
x(n - 2) = ((x(n - 3) + 5) + 5) + 5
x(n - 2) = x(n - 3) + 15
x(n) = x(n - i) + 5i
x(1) = 0
if n = i - 1 -> n - i = 1
substitute i for n
x(n) = x(n - (n - 1)) + 5n
x(n) = x(n - n + 1) + 5n
x(n) = x(1) + 5n
x(n) = 0 + 5n
x(n) = 5n

1.c. x(n) = x(n - 1) + n for n>0, x(0) = 0
x(n - 1) = (x(n - 2) + n) + n
x(n - 1) = x(n - 2) + 2n
x(n - 2) = ((x(n - 3) + n) + n) + n
x(n - 2) = x(n - 3) + 3n
x(n) = x(n - i) + in
if n = i -> n - i = 0
substitute i for n
x(n) = x(n - n) + nn
x(n) = x(n - n) + nn
x(n) = x(0) + nn
x(n) = 0 + nn
x(n) = n^2

4.a. q(n) = q(n - 1) + 2n - 1 for n>1, q(1) = 1
q(2) = 1 + 2(2) - 1 = 4
q(3) = 4 + 2(3) - 1 = 9
q(4) = 9 + 2(4) - 1 = 16
q(n) = n^2

4.b. q(n) = q(n - 1) + 1 for n>1, q(1) = 0
q(2) = 0 + 1 = 1
q(3) = 1 + 1 = 2
q(4) = 2 + 1 = 3
q(n) = n - 1

4.c. q(n) = q(n - 1) + 3 for n>1, q(1) = 0
q(2) = 0 + 3 = 3
q(3) = 3 + 3 = 6
q(4) = 6 + 3 = 9
q(5) = 9 + 3 = 12
q(n) = 3(n - 1)

----------------------------------------------------------------------
3.1; pg. 103; #9, 10
----------------------------------------------------------------------
9. Selection sort can be implemeneted as stable or unstable.
It depends on the implementation; for example: one could be careful to
only move the minimum value from the unsorted section to sorted section 
when you're selecting the first occurence out of all equal occurences of a given value.

10. Yes, an O(n^2) version of selection sort is possible, just not in-place.
It would require one extra pointer to keep track of the sorted and unsorted portions of the list.

----------------------------------------------------------------------
3.5; pg. 128; #1a, 1b, 4, 7a, 7b
----------------------------------------------------------------------
1.a.
f-b
| |
d-a-c
  | |
  e-g

list:
a->b,c,d,e
b->a,f
c->a,e,g
d->a,f
e->a,g
b->b,d
g->c,e

matrix:
  a b c d e f g
a 0 1 1 1 1 0 0
b 1 0 0 0 0 1 0
c 1 0 0 0 1 0 1
d 1 0 0 0 0 1 0
e 1 0 0 0 0 0 1
f 0 1 0 1 0 0 0
g 0 0 0 0 1 0 0

1.b.
stack (x->y where x is push order and y is pop order):
top
e7->4
g6->5
c5->6
f4->1
d3->2
b2->3
a1->7
bottom

DFS tree (cross edges in dotted lines):
     `a` `
   ` / \   `
  ` b   c   `
 ` /     \   `
 `d`      g   `
 / `       \  `
f`          e`

4. 
queue (x->y where x is enqueue order and y is dequeue order):
front|a1->1|b2->2|c3->3|d4->4|e5->5|f6->6|g7->7|rear

BFS tree (cross edges in dotted lines):
    a
  /| |\
`e c b`d`
 ` | | `
  `g f`

7. Assuming "connected copmenents of a graph" means
vertexes where there is a path between any given vertex
to another (even through another vertex) and problem is solely
referring to undirected graphs.
a. Keep track of all vertexes that get popped off the stack,
in their own set. Any time the stack is empty, a group is complete
and a new one should be formed if there are remaining vertexes.
Each of these sets are groups of connected vertexes, or 
"connected copmenents of a graph".
b. Same as above but using a queue instead of a stack and thus
keeping track of all vertexes that get dequeued from the queue.

----------------------------------------------------------------------
4.1; pg. 136; #2a, 2b, 5, 9, 11a
----------------------------------------------------------------------
2.a. 2n glasses
Let 1 represent a full glass and 0 an empty glass
in an ordered array:
[1,1,1,...n,0,0,0,...2n]
All one has to do is swap ever 1 at an even index
up to n. This will result in n/2 swaps; the minimum number of swaps.

2.b. This would be similar. Compare the first and second index.
You could quantify how close the cups are to being in a proper order
(two orders are full-empty, etc. or empty-full, etc.) by counting how many cups
do not match one of the two orders. 
Depending which order is a closer match, use that to determine if a cup is correct or not.
Then, find one that's incorrect and find a second that's the opposite and also incorrect, then swap them.
Repeat until all are correct; this would require, in the worst case, and order of n swaps.

P.S. If you use a straw and sunction no glasses need be moved, thus it is O(1).

5.
  a b c
a 0 1 0
b 1 0 1
c 0 1 0

a-b
  |
  c

  a b c
a 0 0 1
b 0 0 1
c 1 1 0

a  b
\ /
 c

The answer is no, because it does not work correctly
for every undirected graph with n>1 vertices, it only
works for complete graphs.

9. Yes it is possible to implement insertion sort for a
linked list in n^2 time. One could just swap the data and 
maintain pointers to the unsorted and sorted heads of the list.
One could could also swap the nodes themnselves but would also need
to maintain temporary pointers to keep track of the next and previous elements
(or set previous element's next pointer in a singly linked list).
This would not be an in place algorithm in order to maintain the time efficiency.

11.a. Arrays sorted in non-ascending order (since i<k and A[i]>A[j])
have the largest number of inversions.
                inversions
          [0]-> 0 
        [1,0]-> 1
      [2,1,0]-> 3
    [3,2,1,0]-> 6
  [4,3,2,1,0]-> 10
[5,4,3,2,1,0]-> 15
I(n) = I(n - 1) + n - 1 where n > 1, I(1) = 0
I(n) = I(n - 1) + 2n - 2
I(n) = I(n - 1) + 3n - 3
I(n) = I(n - i) + in - i
let i = n - 1, n - i = 1
I(n) = I(n - (n-1)) + (n-1)n - (n-1)
I(n) = I(1) + n^2 - n - n + 1
I(n) = 0 + n^2 - 2n + 1
I(n) = n^2 - 2n + 1
Greatest number of inversions is: n^2 - 2n + 1

                inversions
          [0]-> 0 
        [0,1]-> 0
      [0,1,2]-> 0
    [0,1,2,3]-> 0
  [0,1,2,3,4]-> 0
[0,1,2,3,4,5]-> 0
An array sorted in ascending order will have the
smallest number of inversions which is: 0