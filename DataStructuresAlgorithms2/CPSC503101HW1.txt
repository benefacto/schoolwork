*/
Ben Walker
CPSC 5031 01
HW #1

-------------------
1.1, pg. 8, #8-10a
-------------------
8. What if 0 < m < n?
gcd(m, n) = gcd(n, m mod n)
m = 7, n = 21
gcd(7, 21)= gcd(21, 7 mod 21)
gcd(21, 7)= gcd(7, 21 mod 7)
gcd(7, 0)= 7
m = 1, n = 2
gcd(1, 2) = gcd(2, 1 mod 2)
gcd(2, 1) = gcd(1, 2 mod 1)
gcd(1, 0) = 1
It will end up swapping them as a result of the modulo in the recursive call
This is because m mod n = m where 0 < m < n and m is a real positive integer.
This will only occur once, then these calls will proceed just as if m and n had been reversed.

9. a. Minimum number of divisions for all inputs 1 <= m, n <= 10 ?
m = 1, n = 1
gcd(1, 1)=gcd(1, 1 mod 1)
gcd(1, 0)=1
The minimum number of divisions is 1 because all integers are divisble by 1.
b. Maximum number of divisions among all inputs 1 <= m, n <= 10 ?
The maximum number of divisions is 5; see below Java code which calculated:
*/
import java.util.*;
import java.lang.Math;

public class NumberOfDivisions
{
  public static void main(String[] args)
  {
    List<Integer> times = new ArrayList<Integer>();
    for(Integer m = 1; m <= 10; m++)
    {
      for(Integer n = 1; n <= 10; n++)
      {
        times.add(numDivs(m,n,0));
      }
    }
    System.out.print(Collections.max(times));
    // displays which integers provided max times, in case you're curious
    for(Integer i = 0; i < times.size(); i++)
    {
       if(times.get(i) == Collections.max(times))
       {
         System.out.print("\n" + i);
       }
    }
  }
  
  public static Integer numDivs(Integer m, Integer n, Integer numberOfDivisions)
  {
    if(n == 0 || m == 0)
    {
      return numberOfDivisions;
    }
    else
    {
      return numDivs(n, m % n, ++numberOfDivisions);
    }
  }
}
/*
10. a. gcd(m, n) = gcd(m - n ,n) for m >= n > 0
function gcd(m, n:integers)
 if m < n
  return 0
 else if m <= 0
  return n
 else
  return gcd(m - n,n)

-------------------
1.2, pg. 17, #5-9
-------------------
5. a. Take the decimal number, divide it by two and store the remainder on the left side of the binary result.
Repeat the divide by two operation on the quotient and concatenate the remainder to the binary result (on the left side).
Stop repeating when the number to be divided is 0.
b. 
procedure decToBinary(dec)
 binary <- ''
 return decToBin(dec,binary)
procedure decToBin(dec,binary)
 if decimal <= 0
  return binary
 else
  binary <- dec % 2 + binary
  dec <- dec / 2
  return decToBin(dec, binary)

6. // X is arbitrarty number of seconds, determined by business
i. Idle with advertisements, waiting for card input
ii. Validate card input, if invalid then eject card, display error message, & return to i
iii. Get bank account current balance & wait for withdrawl request (timeout after X seconds if no input and return to i)
iv. Receive withdrawl request
v. Validate withdrawl request, ensuring not exceeding current balance or withdrawl limits; if exceeds, display error message & return to iii
vi. Validate ATM possesses sufficient bills, if not, proceed to ix
vii. Dispense requested amount & subtract it from current account balance
viii. Eject card and display success message, return to i after X seconds 
ix. ATM possesses insufficent bills for valid withdrawl request, eject card, display error in withdrawl message for X seconds
x. Display out of service message

9.
algorithm MinDistance(A[0..n-1])
Sort(A[0..n-1])
dmin <- infinity
for i <- 0 to n-2 do
 if |a[i]-a[i+1]| < dmin
  dmin <- |a[i]-a[i+1]|
return dmin

This will have better performance assuming an efficient sorting algorithm is used.
It will be more efficent since looping through the array once to calculate the minimum distance.
-------------------
1.3, pg. 23, #1
-------------------
1. n = 6
A[60, 35, 81, 88, 14, 47]
   0   1   2   3   4   5

Count[0, 0, 0, 0, 0, 0]
i= 0, j = 0 + 1 = 1
 if a[0] < a[1]
  60 >= 35
 else Count[0] = Count[0] + 1
 Count[0] = 1

Count[1, 0, 0, 0, 0, 0]
i= 0, j = 1 + 1 = 2
 if a[0] < a[2]
  60 < 81
  Count[2] = Count[2] + 1
  Count[2] = 1

Count[1, 0, 1, 0, 0, 0]
i= 0, j = 2 + 1 = 3
 if a[0] < a[3]
  60 < 98
  Count[3] = Count[3] + 1
  Count[3] = 1

Count[1, 0, 1, 1, 0, 0]
i= 0, j = 3 + 1 = 4
 if a[0] < a[4]
  60 >= 14
 else Count[0] = Count[0] + 1
 Count[0] = 2

Count[2, 0, 1, 1, 0, 0]
i= 0, j = 4 + 1 = 5
 if a[0] < a[5]
  60 >= 47
 else Count[0] = Count[0] + 1
 Count[0] = 3

Count[3, 0, 1, 1, 0, 0]
i= 1, j = 1 + 1 = 2
 if a[1] < a[2]
  35 < 81
  Count[2] = Count[2] + 1
  Count[2] = 2

Count[3, 0, 2, 1, 0, 0]
i= 1, j = 2 + 1 = 3
 if a[1] < a[3]
  35 < 98
  Count[3] = Count[3] + 1
  Count[3] = 2

Count[3, 0, 2, 2, 0, 0]
i= 1, j = 3 + 1 = 4
 if a[1] < a[4]
  35 >= 14
 else Count[1] = Count[1] + 1
 Count[1] = 1

Count[3, 1, 2, 2, 0, 0]
i= 1, j = 4 + 1 = 5
 if a[1] < a[5]
  35 < 47
  Count[5] = Count[5] + 1
  Count[5] = 1

Count[3, 1, 2, 2, 0, 1]
i= 2, j = 2 + 1 = 3
 if a[2] < a[3]
  81 < 98
  Count[3] = Count[3] + 1
  Count[3] = 3

Count[3, 1, 2, 3, 0, 1]
i= 2, j = 3 + 1 = 4
 if a[2] < a[4]
  81 >= 14
 else Count[2] = Count[2] + 1
 Count[2] = 3

Count[3, 1, 3, 3, 0, 1]
i= 2, j = 4 + 1 = 5
 if a[2] < a[5]
  81 >= 47
 else Count[2] = Count[2] + 1
 Count[2] = 4

Count[3, 1, 4, 3, 0, 1]
i= 3, j = 3 + 1 = 4
 if a[3] < a[4]
  98 >= 14
 else Count[3] = Count[3] + 1
 Count[3] = 4

Count[3, 1, 4, 4, 0, 1]
i= 3, j = 4 + 1 = 5
 if a[3] < a[5]
  98 >= 47
 else Count[3] = Count[3] + 1
 Count[3] = 5

Count[3, 1, 4, 5, 0, 1]
i= 4, j = 4 + 1 = 5
 if a[4] < a[5]
  14 < 47
  Count[5] = Count[5] + 1
  Count[5] = 2

Count[3, 1, 4, 5, 0, 2]

A[60, 35, 81, 88, 14, 47]
   0   1   2   3   4   5
Count[3, 1, 4, 5, 0, 2]
S[3] = 60
S[1] = 35
S[4] = 81
S[5] = 88
S[0] = 14
S[2] = 47
S[14, 35, 47, 60, 81, 88]

b. Stability?
test[37, 25, 25, 17]
Count[0, 0, 0, 0]
i = 0, j = 1
 if A[0] < A[1]
  17 </ 25
 Count[0] = 0 + 1

Count[1, 0, 0, 0]
i = 0, j = 2
 if A[0] < A[2]
  37 </ 25
 Count[0] = 1 + 1

Count[2, 0, 0, 0]
i = 0, j = 3
 if A[0] < A[3]
  37 </ 25
 Count[0] = 1 + 1

Count[3, 0, 0, 0]
Count[3, 1, 0, 0]
Count[3, 2, 0, 0]
Count[3, 2, 1, 0]

S[3] = 37
S[2] = 25
S[1] = 25
S[0] = 17
S[17, 25, 25, 37]

No, this algorithm is not stable.
It does not preserve the positions of two identical elements (25s) but swaps them.

c. In-place?
No, this algorithm is not in-place because it requires the creation of two additional arrays:
S and Count, rather than operating only on input array A.

-------------------
1.4, pg. 37, #1
-------------------
1. a. You could set the element at the index where the deletion is occuring to the last element.
Then, you could set the last element to null and decrease the size variable by one.
This would necessitate keeping track of the last index separate from the allocation of size of the array.
b. Keep track of which indices are being used. On deletion, set the element's index to unused.
For example, you could have an array of booleans where the indices correspond to the other array's indices 
and the boolean correspond to whether or not the other's array's index is in use.
*/